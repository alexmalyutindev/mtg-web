{"mappings":"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","sources":["src/Mesh.ts","src/Vector.ts","src/InputSystem.ts","src/Scene.ts","src/app.ts"],"sourcesContent":["export class Mesh {\n    vertices: Float32Array;\n    uv: Float32Array;\n    indices: Uint16Array\n\n    vertex_buffer: WebGLBuffer;\n    uv_buffer: WebGLBuffer;\n    index_buffer: WebGLBuffer;\n\n    static Quad(): Mesh {\n        const quad = new Mesh();\n        quad.vertices = new Float32Array([\n            -0.5, 0.5, 0.0,\n            -0.5, -0.5, 0.0,\n            0.5, -0.5, 0.0,\n            0.5, 0.5, 0.0\n        ]);\n        quad.indices = new Uint16Array([\n            3, 2, 1,\n            3, 1, 0\n        ]);\n        quad.uv = new Float32Array([\n            0.0, 1.0,\n            0.0, 0.0,\n            1.0, 0.0,\n            1.0, 1.0\n        ]);\n        return quad;\n    }\n\n    Init(gl: WebGL2RenderingContext): void {\n        this.vertex_buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertex_buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n\n        if (this.uv.length > 0) {\n            this.uv_buffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.uv_buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.uv), gl.STATIC_DRAW);\n        }\n\n        this.index_buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.index_buffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indices), gl.STATIC_DRAW);\n    }\n}","export class Vector2 {\n    x : number;\n    y : number;\n\n    constructor(x : number, y : number){\n        this.x = x;\n        this.y = y;\n    }\n}\n\nexport class Vector3 {\n    x : number;\n    y : number;\n    z : number;\n\n    constructor(x : number, y : number, z : number){\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}","import { Vector2 } from \"./Vector\";\n\n\nexport class Input {\n\tstatic keyboard: Map<string, boolean>;\n\tstatic axis: Vector2;\n\n\tstatic Init(w: Window) {\n\t\tInput.keyboard = new Map<string, boolean>();\n\t\tInput.axis = new Vector2(0, 0);\n\n\t\tw.addEventListener(\"keydown\", Input.keyDown.bind(this));\n\t\tw.addEventListener(\"keyup\", Input.keyUp.bind(this));\n\t}\n\n\tprivate static keyDown(event: KeyboardEvent) {\n\t\t// console.log(\"[Input] Down: \" + event.key);\n\t\tInput.keyboard.set(event.key, true);\n\t\tswitch (event.key.toLowerCase()) {\n\t\t\tcase 'd': Input.axis.x = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'a': Input.axis.x = -1;\n\t\t\t\tbreak;\n\t\t\tcase 'w': Input.axis.y = 1;\n\t\t\t\tbreak;\n\t\t\tcase 's': Input.axis.y = -1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate static keyUp(event: KeyboardEvent) {\n\t\t// console.log(\"[Input] Up: \" + event.key);\n\t\tInput.keyboard.set(event.key, false);\n\n\t\tswitch (event.key.toLowerCase()) {\n\t\t\tcase 'd': Input.axis.x = Input.axis.x > 0 ? 0 : Input.axis.x;\n\t\t\t\tbreak;\n\t\t\tcase 'a': Input.axis.x = Input.axis.x < 0 ? 0 : Input.axis.x;\n\t\t\t\tbreak;\n\t\t\tcase 'w': Input.axis.y = Input.axis.y > 0 ? 0 : Input.axis.y;\n\t\t\t\tbreak;\n\t\t\tcase 's': Input.axis.y = Input.axis.y < 0 ? 0 : Input.axis.y;\n\t\t\t\tbreak;\n\t\t}\n\t}\n};","import { Vector3 } from \"./Vector\";\n\ninterface Serializable<T> {\n    deserialize(input : T) : T;\n}\n\nexport class Scene implements Serializable<Scene> {\n    root: Entity[];\n    \n    deserialize(input : Scene): Scene {\n        this.root = input.root;\n        for (let index = 0; index < this.root.length; index++) {\n            this.root[index] = new Entity().deserialize(input.root[index]);\n        }\n        return this;\n    }\n}\n\nclass Entity implements Serializable<Scene> {\n    name: string;\n    type: \"camera\" | \"test_quad\";\n    position: Vector3;\n    rotation: Vector3;\n    scale: Vector3 = new Vector3(1, 1, 1);\n    transform: Matrix4x4;\n\n    UpdateMatrix(): void {\n        this.transform.SetTRS(this.position, this.rotation, this.scale);\n    }\n\n    deserialize(input : Entity): Entity {\n        this.name = input.name;\n        this.type = input.type;\n        this.position = input.position;\n        this.rotation = input.rotation;\n        this.scale = input.scale;\n        this.transform = new Matrix4x4(Matrix4x4.identity); \n\n        this.UpdateMatrix();\n        return this;\n    }\n}\n\nconst TRANSLATION_X = 3, TRANSLATION_Y = 7, TRANSLATION_Z = 11;\nconst SCALE_X = 0, SCALE_Y = 5, SCALE_Z = 10;\nclass Matrix4x4 extends Float32Array {\n    static identity : Float32Array = new Float32Array([\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    ]);\n\n    constructor(array : Float32Array) {\n        super(array);\n        this.set(Matrix4x4.identity);\n    }\n\n    SetTRS(this: Float32Array, position: Vector3, rotation: Vector3, scale: Vector3) {\n        this.set(Matrix4x4.identity);\n\n        this[TRANSLATION_X] = position.x;\n        this[TRANSLATION_Y] = position.y;\n        this[TRANSLATION_Z] = position.z;\n\n        this[SCALE_X] *= scale.x;\n        this[SCALE_Y] *= scale.y;\n        this[SCALE_Z] *= scale.z;\n    }\n}","import { Mesh } from \"./Mesh\";\nimport { Input } from \"./InputSystem\";\nimport { Scene } from \"./Scene\";\n\nfunction CreateShader(gl: WebGL2RenderingContext): WebGLProgram {\n    const vertCode = `\n    uniform float u_Time;\n    uniform mat4 u_ObjectToWorld;\n    uniform mat4 u_WorldToView;\n    uniform mat4 u_Projection;\n\n    attribute vec3 a_PositionOS;\n    attribute vec2 a_Texcoord;\n\n    varying vec2 v_Texcoord;\n\n    void main(void) {\n        v_Texcoord = a_Texcoord;\n        vec3 positionWS = (u_ObjectToWorld * vec4(a_PositionOS, 1.0)).xyz;\n        vec3 positionVS = (u_WorldToView * vec4(positionWS, 1.0)).xyz;\n\n        vec4 posiotionCS = u_Projection * vec4(positionVS, 1.0);\n        gl_Position = posiotionCS;\n    }`;\n\n    const fragCode = `\n    precision mediump float;\n    varying mediump vec2 v_Texcoord;\n\n    uniform sampler2D u_MainTex;\n\n    float checkers(in vec2 p)\n    {\n        vec2 s = sign(fract(p*.5)-.5);\n        return .5 - .5*s.x*s.y;\n    }\n\n    void main(void) {\n        float checker = checkers(v_Texcoord.xy * 5.0);\n        gl_FragColor = mix(vec4(.2, .2, .2, 1.0), vec4(.9, .9, .9, 1.0), checker); \n        // Texture2D(u_MainTex, v_Texcoord);\n    }`;\n\n    var error;\n    var vertShader = gl.createShader(gl.VERTEX_SHADER)!;\n    gl.shaderSource(vertShader, vertCode);\n    gl.compileShader(vertShader);\n\n    error = gl.getShaderInfoLog(vertShader);\n    if (error) console.log(error);\n\n    var fragShader = gl.createShader(gl.FRAGMENT_SHADER)!;\n    gl.shaderSource(fragShader, fragCode);\n    gl.compileShader(fragShader);\n\n    error = gl.getShaderInfoLog(fragShader)\n    if (error) console.log(error);\n\n    var shaderProgram = gl.createProgram()!;\n    gl.attachShader(shaderProgram, vertShader);\n    gl.attachShader(shaderProgram, fragShader);\n    gl.linkProgram(shaderProgram);\n\n    error = gl.getProgramInfoLog(shaderProgram);\n    if (error) console.log(error);\n\n    return shaderProgram;\n}\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst gl = canvas.getContext(\"webgl2\")!;\nconsole.log(gl);\n\nconst far = 25;\nconst near = 0.01;\nconst f = Math.tan(Math.PI * 0.5 - 0.5 * 1.047); // 1.047 <- 60grad\nconst aspect = canvas.width / canvas.height;\nconst rangeInv = 1.0 / (near - far);\n\n// function ProjectionMat(fov, aspect) {\n//     const f = 1.0 / Math.tan(fov / 2);\n//     const rangeInv = 1 / (near - far);\n\n//     return [\n//         f / aspect, 0, 0, 0,\n//         0, f, 0, 0,\n//         0, 0, (near + far) * rangeInv, -1,\n//         0, 0, near * far * rangeInv * 2, 0\n//     ];\n// }\n\nconst projection = new Float32Array([\n    f / aspect, 0, 0, 0,\n    0, f, 0, 0,\n    0, 0, (near + far) * rangeInv, -1,\n    0, 0, 2 * near * far * rangeInv, 0\n]);\n\nvar x = 0, y = 0, z = 0;\nvar h = 1, w = 1, d = 1;\nconst objectToWorld = new Float32Array([\n    h, 0, 0, x,\n    0, w, 0, y,\n    0, 0, d, z,\n    0, 0, 0, 1,\n]);\n\nvar cos = 0; // cos(PI)\nvar sin = 1; // cos(PI)\ny = -0.5;\nconst objectToWorld_2 = new Float32Array([\n    5, 0, 0, x,\n    0, 5 * cos, -5 * sin, y,\n    0, 5 * sin, 5 * cos, z,\n    0, 0, 0, 1,\n]);\n\ncos = -1; // cos(PI)\nsin = 0; // cos(PI)\nlet worldToView = new Float32Array([\n    cos, 0, sin, 0,\n    0, 1, 0, 0,\n    -sin, 0, cos, -5,\n    0, 0, 0, 1,\n]);\n\ndocument.getElementById(\"fov\").addEventListener(\"input\", function (e) {\n    var f = Math.tan(Math.PI * 0.5 - 0.5 * +(e.target as HTMLInputElement).value * Math.PI);\n    projection[0] = f / aspect;\n    projection[5] = f;\n});\n\nconst TRANSLATION_X = 12, TRANSLATION_Y = 13, TRANSLATION_Z = 14;\ndocument.getElementById(\"x\").addEventListener(\"input\", function (e) {\n    objectToWorld[TRANSLATION_X] = +(e.target as HTMLInputElement).value;\n});\ndocument.getElementById(\"y\").addEventListener(\"input\", function (e) {\n    objectToWorld[TRANSLATION_Y] = +(e.target as HTMLInputElement).value;\n});\ndocument.getElementById(\"z\").addEventListener(\"input\", function (e) {\n    objectToWorld[TRANSLATION_Z] = +(e.target as HTMLInputElement).value;\n});\n\nInput.Init(window);\n\n\nasync function Main() {\n    let request = await fetch(\"../resources/scene.json\");\n    let json = await request.json();\n    const scene: Scene = new Scene().deserialize(json); \n    \n    // await (await fetch(\"../resources/scene.json\")).json();\n    console.log(scene);\n\n    worldToView = scene.root.find(a => a.type == \"camera\").transform;\n\n    // return;\n\n    const quad = Mesh.Quad();\n    quad.Init(gl);\n\n    var shaderProgram = CreateShader(gl);\n\n    const u_ObjectToWorld = gl.getUniformLocation(shaderProgram, \"u_ObjectToWorld\");\n    const u_WorldToView = gl.getUniformLocation(shaderProgram, \"u_WorldToView\");\n    const u_Projection = gl.getUniformLocation(shaderProgram, \"u_Projection\");\n\n    const u_Time = gl.getUniformLocation(shaderProgram, \"u_Time\");\n    const u_Texture = gl.getUniformLocation(shaderProgram, \"u_MainTex\");\n\n    const a_Texcoord = gl.getAttribLocation(shaderProgram, \"a_Texcoord\");\n    const a_PositionOS = gl.getAttribLocation(shaderProgram, \"a_PositionOS\");\n\n    function Render() {\n        gl.disable(gl.CULL_FACE);\n        gl.enable(gl.DEPTH_TEST);\n\n        gl.clearColor(1, 1, 1, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        gl.useProgram(shaderProgram);\n\n        // Global\n        // gl.uniformMatrix4fv(u_ObjectToWorld, true, objectToWorld);\n        gl.uniformMatrix4fv(u_WorldToView, false, worldToView);\n        gl.uniformMatrix4fv(u_Projection, false, projection);\n        gl.uniform1f(u_Time, Time.time / 1000.0);\n\n        // Bind mesh\n        gl.enableVertexAttribArray(a_PositionOS);\n        gl.bindBuffer(gl.ARRAY_BUFFER, quad.vertex_buffer);\n        gl.vertexAttribPointer(a_PositionOS, 3, gl.FLOAT, false, 0, 0);\n\n        gl.enableVertexAttribArray(a_Texcoord);\n        gl.bindBuffer(gl.ARRAY_BUFFER, quad.uv_buffer);\n        gl.vertexAttribPointer(a_Texcoord, 2, gl.FLOAT, false, 0, 0);\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, quad.index_buffer);\n\n        // Bind unitforms\n        // gl.uniform1i(u_Texture, 0);\n\n        gl.viewport(0, 0, canvas.width, canvas.height);\n\n        for (let i = 0; i < scene.root.length; i++) {\n            let entity = scene.root[i];\n\n            if (entity.type == 'test_quad') {\n                entity.UpdateMatrix();\n\n                gl.uniformMatrix4fv(u_ObjectToWorld, true, entity.transform);\n                gl.drawElements(gl.TRIANGLES, quad.indices.length, gl.UNSIGNED_SHORT, 0);\n            }\n        }\n    }\n\n    function UpdateTime(time: number) {\n        Time.time = time;\n        Time.deltaTime = (time - Time.lastUpdateTime) * 0.001;\n        Time.lastUpdateTime = time;\n    }\n\n    function UpdateInput() {\n        worldToView[TRANSLATION_X] -= Input.axis.x * Time.deltaTime;\n        worldToView[TRANSLATION_Z] += Input.axis.y * Time.deltaTime;\n    }\n\n    function MainLoop(time: number) {\n        UpdateTime(time);\n        UpdateInput();\n        Render();\n    }\n\n    function A(time: number) {\n        MainLoop(time);\n        requestAnimationFrame(B);\n    }\n    function B(time: number) {\n        MainLoop(time);\n        requestAnimationFrame(A);\n    }\n\n    requestAnimationFrame(A);\n}\n\nexport class Time {\n    static time: number = 0;\n    static deltaTime: number = 0.01;\n    static lastUpdateTime: number = 0;\n}\n\nMain();"],"names":["$2ffb0cf5e25d1999$export$e176487c05830cc5","static","quad","vertices","Float32Array","indices","Uint16Array","uv","Init","gl","this","vertex_buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","length","uv_buffer","index_buffer","ELEMENT_ARRAY_BUFFER","$8274ad9ee5db3762$export$c977b3e384af9ae1","constructor","x","y","$8274ad9ee5db3762$export$64b5c384219d3699","z","$47f1b96698ddcbaa$export$f5b8910cec6cf069","w","keyboard","Map","axis","addEventListener","keyDown","bind","keyUp","event","set","key","toLowerCase","$bd794e4ce7a6c88f$export$38af1803e3442a7f","deserialize","input","root","index","$bd794e4ce7a6c88f$var$Entity","scale","UpdateMatrix","transform","SetTRS","position","rotation","name","type","$bd794e4ce7a6c88f$var$Matrix4x4","identity","array","super","$757669482cea08bc$var$canvas","document","getElementById","$757669482cea08bc$var$gl","getContext","console","log","$757669482cea08bc$var$f","Math","tan","PI","$757669482cea08bc$var$aspect","width","height","$757669482cea08bc$var$projection","$757669482cea08bc$var$y","$757669482cea08bc$var$objectToWorld","$757669482cea08bc$var$cos","$757669482cea08bc$var$sin","$757669482cea08bc$var$worldToView","e","f","target","value","window","$757669482cea08bc$export$680ea196effce5f","async","request","fetch","json","scene","find","a","Quad","shaderProgram","error","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","fragShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramInfoLog","$757669482cea08bc$var$CreateShader","u_ObjectToWorld","getUniformLocation","u_WorldToView","u_Projection","u_Time","a_Texcoord","getAttribLocation","a_PositionOS","MainLoop","time","deltaTime","lastUpdateTime","UpdateTime","disable","CULL_FACE","enable","DEPTH_TEST","clearColor","clear","COLOR_BUFFER_BIT","useProgram","uniformMatrix4fv","uniform1f","enableVertexAttribArray","vertexAttribPointer","FLOAT","viewport","i","entity","drawElements","TRIANGLES","UNSIGNED_SHORT","Render","A","requestAnimationFrame","B","$757669482cea08bc$var$Main"],"version":3,"file":"app.js.map"}